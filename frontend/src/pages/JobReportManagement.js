import React, { useState, useEffect } from 'react';
import '../css/style4.css'; // Importing CSS for the job management table
import axios from 'axios';
import SlideBar from '../components/Slidebar';
import jsPDF from 'jspdf';
import 'jspdf-autotable'; // Importing autoTable for table generation
import { Link, useNavigate } from 'react-router-dom'; // Importing useNavigate
import logo from '../ES lo.png'; // Import your logo image here

const JobManagement = () => {
  const [jobs, setJobs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  
  const navigate = useNavigate(); // Initialize navigate

  // Fetch jobs from the backend
  useEffect(() => {
    axios.get('http://localhost:8070/jobReport/')
      .then((response) => {
        setJobs(response.data);
        setLoading(false);
      })
      .catch((error) => {
        console.error("Error fetching jobs:", error);
        setLoading(false);
      });
  }, []);

  // Handle delete request
  const handleDelete = (id) => {
    axios.delete(`http://localhost:8070/jobReport/delete/${id}`)
      .then(() => {
        setJobs(jobs.filter(job => job._id !== id)); 
      })
      .catch((error) => {
        console.error(`Error deleting job with id ${id}:`, error);
      });
  };

  // Filter jobs based on search input
  const filteredJobs = jobs.filter((job) => 
    job.clientName.toLowerCase().includes(searchTerm.toLowerCase()) || 
    job.vehIdentityNumber.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // Generate PDF of the job table
  const downloadPDF = () => {
    const doc = new jsPDF();
    doc.setFontSize(18);

    // Add logo
    doc.addImage(logo, 'PNG', 14, 20, 20, 20); // Adjust the position and size as needed

    // Add title
    doc.setFontSize(17);
    doc.text('WELCOME TO!', 40, 27);
    doc.setFontSize(24);
    doc.text('ES CUSTOMS PVT(LTD)', 40, 38);
    doc.setFontSize(20);
    doc.text('Job Management Report', 14, 50);

    // Add current date and time
    const date = new Date();
    doc.setFontSize(12);
    doc.text(`Generated on: ${date.toLocaleString()}`, 14, 60); // Format the date and time

    // Add contact information (aligned to the right side)
    const contactInfo = `Contact: +94 77 726 0247\nEmail: info@ecustoms39@gmail.com\nAddress: 21 Main Street, Jaela, Sri Lanka`;
    doc.setFontSize(12);
    doc.text(contactInfo, 195, 50, { align: 'right' });

    const tableColumn = ["Client Name", "Email", "Vehicle ID", "Type of Service", "Service Charge", "Status"]; // Added new columns
    const tableRows = [];

    filteredJobs.forEach(job => {
      const jobData = [
        job.clientName,
        job.email,
        job.vehIdentityNumber,
        job.typeOfService,
        job.serviceCharge, // Include service charge
        job.status // Include status
      ];
      tableRows.push(jobData);
    });

    // Generate colorful table using autoTable
    doc.autoTable({
      startY: 70, // Adjusted position for the table
      head: [tableColumn],
      body: tableRows,
      theme: 'grid', // Theme for colorful table
      headStyles: { fillColor: [71, 201, 255] }, // Table header color
      alternateRowStyles: { fillColor: [239, 239, 239] }, // Alternating row colors
      styles: { fontSize: 10, cellPadding: 3 }, // Style options
    });

    // Add footer with centered text
    doc.setFontSize(10);
    const pageHeight = doc.internal.pageSize.height; // Get page height
    doc.text('Generated by ES Customs System', 105, pageHeight - 10, { align: 'center' }); // Footer content

    doc.save('Final Job Reports.pdf');
  };

  if (loading) {
    return <p>Loading jobs...</p>;
  }

  return (
    <div>
      <SlideBar />
      <div className="job-management">
        <h1>Final Job <span>Reports</span></h1>

        {/* Search bar */}
        <form className="search">
          <button className="search__button" type="button"></button>
          <input
            type="text"
            className="search__input"
            placeholder="Search Your Name Or Vehicle ID Number"
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </form>
        
        {/* Job table */}
        <table>
          <thead>
            <tr>
              <th>Client Name</th>
              <th>Email</th>
              <th>Vehicle ID Number</th>
              <th>Type of Service</th>
              <th>Service Charge</th> {/* New column for Service Charge */}
              <th>Status</th> {/* New column for Status */}
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {filteredJobs.map((job) => (
              <tr key={job._id}>
                <td>{job.clientName}</td>
                <td>{job.email}</td>
                <td>{job.vehIdentityNumber}</td>
                <td>{job.typeOfService}</td>
                <td>{job.serviceCharge}</td> {/* Displaying service charge */}
                <td>{job.status}</td> {/* Displaying status */}
                <td>
                  <button onClick={() => handleDelete(job._id)} className="btn-delete">Delete</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {/* PDF Download button */}
        <button onClick={downloadPDF} className="btn-download-pdf">
          Download PDF
        </button>

        <div className="done-jobs-container">
          <button className="cta" onClick={() => navigate("/JobReport")}>
            <span className="hover-underline-animation">Job Reports</span>
            <svg
              id="arrow-horizontal"
              xmlns="http://www.w3.org/2000/svg"
              width="30"
              height="10"
              viewBox="0 0 46 16"
              fill="white"
            >
              <path
                id="Path_10"
                data-name="Path 10"
                d="M8,0,6.545,1.455l5.506,5.506H-30V9.039H12.052L6.545,14.545,8,16l8-8Z"
                transform="translate(30)"
              />
            </svg>
          </button>
        </div>
      </div>
    </div>
  );
};

export default JobManagement;
