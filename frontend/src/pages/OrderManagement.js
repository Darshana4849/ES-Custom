import React, { useState, useEffect } from 'react';
import '../css/style6.css'; // Importing CSS for the order management table 
import axios from 'axios';
import SlideBar from '../components/Slidebar';
import jsPDF from 'jspdf';
import 'jspdf-autotable'; // Importing autoTable for table generation
import logo from '../ES lo.png'; // Import logo image here

const OrderManagement = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');

  // Fetch orders from the backend
  useEffect(() => {
    axios.get('http://localhost:8070/order/')
      .then((response) => {
        console.log("Fetched orders:", response.data); // Logging to verify the data
        setOrders(response.data);
        setLoading(false);
      })
      .catch((error) => {
        console.error("Error fetching orders:", error);
        setLoading(false);
      });
  }, []);

  // Handle delete request
  const handleDelete = (id) => {
    axios.delete(`http://localhost:8070/order/delete/${id}`)
      .then(() => {
        setOrders(orders.filter(order => order._id !== id)); 
      })
      .catch((error) => {
        console.error(`Error deleting order with id ${id}:`, error);
      });
  };

  // Filter orders based on search input
  const filteredOrders = orders.filter((order) => 
    order.item_name?.toLowerCase().includes(searchTerm.toLowerCase()) || 
    order.contact?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // Generate PDF of the order table
  const downloadPDF = () => {
    const doc = new jsPDF();
    doc.setFontSize(18);

    // Add logo
    doc.addImage(logo, 'PNG', 14, 20, 20, 20); // Adjust the position and size as needed

    // Add title
    doc.setFontSize(17);
    doc.text('WELCOME TO!', 40, 27);
    doc.setFontSize(24);
    doc.text('ES CUSTOMS PVT(LTD)', 40, 38);
    doc.setFontSize(20);
    doc.text('Order Management Report', 14, 50);

    // Add current date and time
    const date = new Date();
    doc.setFontSize(12);
    doc.text(`Generated on: ${date.toLocaleString()}`, 14, 60); // Format the date and time

    // Add contact information (aligned to the right side)
    const contactInfo = `Contact: +94 77 726 0247\nEmail: info@ecustoms39@gmail.com\nAddress: 21 Main Street, Jaela, Sri Lanka`;
    doc.setFontSize(12);
    doc.text(contactInfo, 195, 50, { align: 'right' });

    // Define table columns and rows
    const tableColumn = ["Item Name", "Item Code", "Count", "Price", "Contact", "Address"];
    const tableRows = [];

    filteredOrders.forEach(order => {
      const orderData = [
        order.item_name || 'N/A',
        order.item_code || 'N/A',
        order.count || 'N/A',
        order.price || 'N/A',
        order.contact || 'N/A',
        order.address || 'N/A',
      ];
      tableRows.push(orderData);
    });

    // Generate colorful table using autoTable
    doc.autoTable({
      startY: 70, // Adjusted position for the table
      head: [tableColumn],
      body: tableRows,
      theme: 'grid', // Theme for colorful table
      headStyles: { fillColor: [71, 201, 255] }, // Table header color
      alternateRowStyles: { fillColor: [239, 239, 239] }, // Alternating row colors
      styles: { fontSize: 10, cellPadding: 3 }, // Style options
    });

    // Add footer with centered text
    doc.setFontSize(10);
    const pageHeight = doc.internal.pageSize.height; // Get page height
    doc.text('Generated by ES Customs System', 105, pageHeight - 10, { align: 'center' }); // Footer content

    doc.save('Order_Management_Report.pdf');
  };

  if (loading) {
    return <p>Loading orders...</p>;
  }

  return (
    <div>
      <SlideBar />
      <div className="order-management">
        <h1>Order <span>Management</span> </h1>

        {/* Search bar */}
        <form className="search">
          <button className="search__button" type="button"></button>
          <input type="text" className="search__input" placeholder="Search Item Name or Contact" onChange={(e) => setSearchTerm(e.target.value)} />
        </form>

        {/* Order table */}
        <table>
          <thead>
            <tr>
              <th>Item Name</th>
              <th>Item Code</th>
              <th>Count</th>
              <th>Price</th>
              <th>Contact</th>
              <th>Address</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {filteredOrders.map((order) => (
              <tr key={order._id}>
                <td>{order.item_name || 'N/A'}</td>
                <td>{order.item_code || 'N/A'}</td>
                <td>{order.count || 'N/A'}</td>
                <td>{order.price || 'N/A'}</td>
                <td>{order.contact || 'N/A'}</td>
                <td>{order.address || 'N/A'}</td>
                <td>
                  <button onClick={() => handleDelete(order._id)} className="btn-delete">Delete</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {/* PDF Download button */}
        <button onClick={downloadPDF} className="btn-download-pdf">
          Download PDF
        </button>
      </div>
    </div>
  );
};

export default OrderManagement;
